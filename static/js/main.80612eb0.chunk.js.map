{"version":3,"sources":["types.ts","constants.ts","Components/WeatherIcon/WeatherIcon.tsx","atoms.ts","Components/TodayForecast/TodayForecast.tsx","Components/FutureForecast/FutureForecast.tsx","Components/FutureForecast/FutureForecastContainer.tsx","Components/Dashboard/Dashboard.tsx","Components/Footer/Footer.tsx","Components/CitySelect/CitySelect.tsx","Components/CitySelect/CitySelectContainer.tsx","Components/UnitToggle/UnitToggle.tsx","Components/UnitToggle/UnitToggleContainer.tsx","App/App.tsx","Data/DataHelpers.ts","App/AppContainer.tsx","Logic/LogicHelpers.ts","index.tsx"],"names":["EDefaultSelectedCity","isoCountries","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","WeatherIcon","props","day","size","weatherId","role","aria-label","weather","style","color","fontSize","atomForecast","atom","key","default","TodayForecast","forecast","useRecoilValue","Grid","item","lg","sx","background","padding","borderRadius","border","container","direction","justifyContent","length","Typography","variant","fontWeight","Skeleton","width","height","alignItems","fontFamily","maxTemp","minTemp","marginTop","textTransform","FutureForecast","futureDays","blankDays","map","futureDay","Tooltip","title","placement","dayId","FutureForecastContainer","useState","setFutureDays","useEffect","nextDays","splice","Dashboard","Paper","elevation","Footer","margin","marginBottom","Link","href","target","rel","CitySelect","cityOptions","loadingCityOptions","selectedCity","handleDropdownChange","handleInputChange","xs","Autocomplete","id","value","options","getOptionLabel","option","state","cityName","country","isOptionEqualToValue","loading","onChange","onInputChange","renderOption","renderProps","renderInput","params","TextField","label","placeholder","inputProps","CitySelectContainer","setSearchedCity","setSelectedCity","_event","window","localStorage","setItem","JSON","stringify","UnitToggle","units","handleChange","theme","useTheme","largeScreen","useMediaQuery","breakpoints","up","ToggleButtonGroup","exclusive","ToggleButton","UnitToggleContainer","setUnits","App","CssBaseline","paddingTop","xl","md","sm","spacing","undefined","baseURL","buildURLWithQueryParams","endpoint","url","URL","join","urlSearchParams","URLSearchParams","search","String","AppContainer","setForecast","useSetRecoilState","searchedCity","setCityOptions","setLoadingCityOptions","savedCity","parse","setTimeout","appid","process","q","limit","fetch","then","response","json","data","index","name","longitude","lon","latitude","lat","catch","err","console","error","exclude","weatherArray","weekDays","Date","dt","getDay","Math","round","temp","min","max","description","digestWeatherData","daily","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80612eb0.chunk.js","sourcesContent":["/** \"Feels like\" object from the weather API */\ninterface IFeelsLike {\n  day: number\n  eve: number\n  morn: number\n  night: number\n}\n\n/** Temperature object from the weather API */\ninterface ITemp {\n  day: number\n  eve: number\n  max: number\n  min: number\n  morn: number\n  night: number\n}\n\n/** Weather object from the weather API */\ninterface IWeatherObject {\n  description: string\n  icon: string\n  id: number\n  main: string\n}\n\n/** One day of forecast data from the weather API */\nexport interface IWeatherDay {\n  clouds: number\n  dew_point: number\n  dt: number\n  feels_like: IFeelsLike\n  humidity: number\n  moon_phase: number\n  moonrise: number\n  moonset: number\n  pop: number\n  pressure: number\n  snow?: number\n  rain?: number\n  sunrise: number\n  sunset: number\n  temp: ITemp\n  uvi: number\n  weather: Array<IWeatherObject>\n  wind_deg: number\n  wind_gust: number\n  wind_speed: number\n}\n\n/** One day of forecast data from the weather API, digested and reduced to the essentials */\nexport interface IDigestedWeatherDay {\n  day: string\n  minTemp: number\n  maxTemp: number\n  weather: string\n  weatherId: number\n  dayId: number\n}\n\n/** Option for the city select */\nexport interface IGeocodingOption {\n  country: string\n  lat: number\n  local_names?: Object\n  lon: number\n  name: string\n  state?: string\n}\n\n/** Translations of country names from ISO country codes */\nexport interface IisoCountries {\n  [key: string]: string\n}\n\n/** Formatted option for the city select */\nexport interface IDigestedGeocodingOption {\n  cityName: string\n  state: string\n  country: string\n  longitude: number\n  latitude: number\n  id: number\n}\n\n/** Default selected city to display in the city select */\nexport enum EDefaultSelectedCity {\n  cityName = 'Toronto',\n  country = 'Canada',\n  id = 0,\n  latitude = 43.6534817,\n  longitude = -79.3839347,\n  state = 'Ontario',\n}\n\nexport type TUnits = 'metric' | 'imperial'\n","import { IisoCountries } from './types'\n\n/** Translates ISO country codes to country names */\nexport const isoCountries: IisoCountries = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei Darussalam',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos (Keeling) Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: \"Cote D'Ivoire\",\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands (Malvinas)',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Holy See (Vatican City State)',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran, Islamic Republic Of',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: \"Lao People's Democratic Republic\",\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libyan Arab Jamahiriya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia, Federated States Of',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestinian Territory, Occupied',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russian Federation',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syrian Arab Republic',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe',\n}\n","import {\n  BsFillCloudDrizzleFill,\n  BsFillCloudRainHeavyFill,\n  BsClouds,\n  BsCloudLightningRainFill,\n  BsCloudSnowFill,\n  BsFillCloudHazeFill,\n  BsFillSunFill,\n} from 'react-icons/bs'\nimport { IDigestedWeatherDay } from '../../types'\n\ninterface IComponentProps {\n  day: IDigestedWeatherDay\n  size: string\n}\n\n/** Returns a weather icon according to the weather ID returned from the OpenWeatherMap API */\n/** https://openweathermap.org/weather-conditions */\nconst WeatherIcon = (props: IComponentProps) => {\n  const { day, size } = props\n\n  if (day.weatherId >= 200 && day.weatherId <= 232) {\n    return (\n      <BsCloudLightningRainFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId >= 300 && day.weatherId <= 321) {\n    return (\n      <BsFillCloudDrizzleFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId >= 500 && day.weatherId <= 531) {\n    return (\n      <BsFillCloudRainHeavyFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId >= 600 && day.weatherId <= 622) {\n    return (\n      <BsCloudSnowFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId >= 701 && day.weatherId <= 781) {\n    return (\n      <BsFillCloudHazeFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId === 800) {\n    return (\n      <BsFillSunFill\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else if (day.weatherId >= 801 && day.weatherId <= 804) {\n    return (\n      <BsClouds\n        role=\"img\"\n        aria-label={day.weather}\n        style={{ color: '#30456A', fontSize: size }}\n      />\n    )\n  } else return null\n}\n\nexport default WeatherIcon\n","import { atom } from 'recoil'\nimport { IDigestedWeatherDay } from './types'\n\n/** Array containing a five-day weather forecast for the selected city */\nexport const atomForecast = atom<IDigestedWeatherDay[]>({\n  key: 'atomForecast',\n  default: [],\n})\n","import { Grid, Typography, Skeleton } from '@mui/material'\nimport WeatherIcon from '../WeatherIcon/WeatherIcon'\nimport { atomForecast } from '../../atoms'\nimport { useRecoilValue } from 'recoil'\n\nconst TodayForecast = () => {\n  /** Array containing a five-day weather forecast for the selected city */\n  const forecast = useRecoilValue(atomForecast)\n\n  return (\n    <Grid\n      item\n      lg={12}\n      sx={{\n        background: '#EEF6FB',\n        padding: '2em 0 2em 0',\n        borderRadius: '15px 15px 0 0',\n        border: '0.25em #FFFFFF solid',\n      }}\n    >\n      <Grid container item direction=\"column\">\n        <Grid container item justifyContent=\"center\">\n          <Grid item>\n            {forecast.length ? (\n              <Typography variant=\"h4\" sx={{ fontWeight: 'light' }}>\n                Today\n              </Typography>\n            ) : (\n              <Skeleton variant=\"text\" width={130} height={42} />\n            )}\n          </Grid>\n        </Grid>\n        <Grid item container justifyContent=\"center\">\n          <Grid item container lg={3} justifyContent=\"center\">\n            {forecast.length ? (\n              <WeatherIcon day={forecast[0]} size={'10rem'} />\n            ) : (\n              <Skeleton variant=\"rectangular\" width={140} height={130} />\n            )}\n          </Grid>\n          <Grid item container direction=\"column\" lg={2} alignItems=\"center\">\n            <Grid item>\n              {forecast.length ? (\n                <Typography\n                  sx={{\n                    fontWeight: 'bold',\n                    fontSize: '4rem',\n                    fontFamily: 'Coda',\n                  }}\n                >\n                  {forecast[0].maxTemp}°\n                </Typography>\n              ) : (\n                <Skeleton variant=\"text\" width={80} height={90} />\n              )}\n            </Grid>\n            <Grid item>\n              {forecast.length ? (\n                <Typography\n                  sx={{\n                    fontWeight: 'bold',\n                    fontSize: '2rem',\n                    fontFamily: 'Coda',\n                  }}\n                >\n                  {forecast[0].minTemp}°\n                </Typography>\n              ) : (\n                <Skeleton variant=\"text\" width={60} height={60} />\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container item justifyContent=\"center\" sx={{ marginTop: '1em' }}>\n          {forecast.length ? (\n            <Typography\n              sx={{\n                fontSize: '1.7rem',\n                fontWeight: 'light',\n                textTransform: 'capitalize',\n              }}\n            >\n              {forecast[0].weather}\n            </Typography>\n          ) : (\n            <Skeleton variant=\"text\" width={220} height={50} />\n          )}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default TodayForecast\n","import { Grid, Typography, Skeleton, Tooltip } from '@mui/material'\nimport { IDigestedWeatherDay } from '../../types'\nimport WeatherIcon from '../WeatherIcon/WeatherIcon'\nimport { atomForecast } from '../../atoms'\nimport { useRecoilValue } from 'recoil'\n\ninterface IComponentProps {\n  futureDays: Array<IDigestedWeatherDay>\n  blankDays: string[]\n}\n\n/** Returns weather forecast for the next four days */\nconst FutureForecast = (props: IComponentProps) => {\n  const { futureDays, blankDays } = props\n\n  /** Array containing a five-day weather forecast for the selected city */\n  const forecast = useRecoilValue(atomForecast)\n\n  /** Display forecast data when it has loaded */\n  if (futureDays.length) {\n    return (\n      <Grid container item>\n        {futureDays.map((futureDay) => {\n          return (\n            <Grid\n              key={futureDay.dayId}\n              container\n              item\n              lg={3}\n              sx={{\n                background: '#EEF6FB',\n                borderRadius: '0 0 0 15px',\n                padding: '2em 0 2em 0',\n                border: '0.25em #FFFFFF solid',\n              }}\n            >\n              <Grid container item direction=\"column\" alignItems=\"center\">\n                <Grid item>\n                  {forecast.length ? (\n                    <Typography sx={{ fontSize: '1.5em', fontWeight: 'light' }}>\n                      {futureDay.day}\n                    </Typography>\n                  ) : (\n                    <Skeleton variant=\"text\" width={70} height={35} />\n                  )}\n                </Grid>\n                <Grid item>\n                  {forecast.length ? (\n                    <Tooltip\n                      title={\n                        <span style={{ textTransform: 'capitalize' }}>\n                          {futureDay.weather}\n                        </span>\n                      }\n                      placement=\"top\"\n                    >\n                      <span>\n                        <WeatherIcon day={futureDay} size={'4rem'} />\n                      </span>\n                    </Tooltip>\n                  ) : (\n                    <Skeleton variant=\"rectangular\" width={70} height={55} />\n                  )}\n                </Grid>\n                <Grid item>\n                  {forecast.length ? (\n                    <Typography\n                      sx={{\n                        fontWeight: 'bold',\n                        fontSize: '2rem',\n                        fontFamily: 'Coda',\n                      }}\n                    >\n                      {futureDay.maxTemp}°\n                    </Typography>\n                  ) : (\n                    <Skeleton variant=\"text\" width={70} height={45} />\n                  )}\n                </Grid>\n                <Grid item>\n                  {forecast.length ? (\n                    <Typography\n                      sx={{\n                        fontWeight: 'bold',\n                        fontSize: '1.2rem',\n                        fontFamily: 'Coda',\n                      }}\n                    >\n                      {futureDay.minTemp}°\n                    </Typography>\n                  ) : (\n                    <Skeleton variant=\"text\" width={70} height={45} />\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n          )\n        })}\n      </Grid>\n    )\n    /** If forecast data has not loaded, display Skeleton. */\n  } else {\n    return (\n      <Grid container item>\n        {blankDays.map((day) => {\n          return (\n            <Grid\n              key={day}\n              container\n              item\n              lg={3}\n              sx={{\n                background: '#EEF6FB',\n                borderRadius: '0 0 0 15px',\n                padding: '2em 0 2em 0',\n                border: '0.25em #FFFFFF solid',\n              }}\n            >\n              <Grid container item direction=\"column\" alignItems=\"center\">\n                <Grid item>\n                  <Skeleton variant=\"text\" width={70} height={35} />\n                </Grid>\n                <Grid item>\n                  <Skeleton variant=\"rectangular\" width={70} height={70} />\n                </Grid>\n                <Grid item>\n                  <Skeleton variant=\"text\" width={70} height={45} />\n                </Grid>\n              </Grid>\n            </Grid>\n          )\n        })}\n      </Grid>\n    )\n  }\n}\n\nexport default FutureForecast\n","import { useState, useEffect } from 'react'\nimport { IDigestedWeatherDay } from '../../types'\nimport FutureForecast from './FutureForecast'\nimport { atomForecast } from '../../atoms'\nimport { useRecoilValue } from 'recoil'\n\n/** Returns weather forecast for the next four days */\nconst FutureForecastContainer = () => {\n  /** Array containing a five-day weather forecast for the selected city */\n  const forecast = useRecoilValue(atomForecast)\n\n  /** The next four days of the weather forecast */\n  const [futureDays, setFutureDays] = useState<IDigestedWeatherDay[]>([])\n\n  /** Array to map over in order to display Skeleton when forecast data has not yet loaded */\n  const blankDays = ['day1', 'day2', 'day3', 'day4']\n\n  /** Forecast of the next four days is the original forecast array with \"today\" removed. */\n  useEffect(() => {\n    if (forecast.length > 0) {\n      const forecastCopy = [...forecast]\n      const nextDays = forecastCopy.splice(1)\n      setFutureDays(nextDays)\n    }\n  }, [forecast])\n\n  return <FutureForecast futureDays={futureDays} blankDays={blankDays} />\n}\n\nexport default FutureForecastContainer\n","import { Grid, Paper } from '@mui/material'\nimport TodayForecast from '../TodayForecast/TodayForecast'\nimport FutureForecastContainer from '../FutureForecast/FutureForecastContainer'\n\nconst Dashboard = () => {\n  return (\n    <Grid container item justifyContent=\"center\" sx={{ marginTop: '1em' }}>\n      <Paper\n        sx={{\n          padding: '0.25em',\n          width: '100%',\n          borderRadius: '15px',\n        }}\n        elevation={3}\n      >\n        <Grid container item direction=\"column\">\n          <TodayForecast />\n          <FutureForecastContainer />\n        </Grid>\n      </Paper>\n    </Grid>\n  )\n}\n\nexport default Dashboard\n","import { Grid, Typography, Link } from '@mui/material'\n\nconst Footer = () => {\n  return (\n    <Grid\n      container\n      item\n      alignItems=\"center\"\n      sx={{ margin: '1em 0 1em 0' }}\n      direction=\"column\"\n    >\n      <Grid item sx={{ marginBottom: '1em' }}>\n        <Typography>\n          Built by{' '}\n          <Link\n            href=\"https://lucassilbernagel.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            color=\"#1F2020\"\n          >\n            Lucas Silbernagel\n          </Link>\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>\n          API:{' '}\n          <Link\n            href=\"https://openweathermap.org/api\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            color=\"#1F2020\"\n          >\n            OpenWeatherMap\n          </Link>\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Footer\n","import { SyntheticEvent } from 'react'\nimport { Grid, TextField, Autocomplete } from '@mui/material'\nimport { IDigestedGeocodingOption } from '../../types'\n\ninterface IComponentProps {\n  cityOptions: Array<IDigestedGeocodingOption>\n  loadingCityOptions: boolean\n  selectedCity: IDigestedGeocodingOption\n  handleDropdownChange: (\n    event: SyntheticEvent<Element, Event>,\n    value: IDigestedGeocodingOption | null\n  ) => void\n  handleInputChange: (\n    event: SyntheticEvent<Element, Event>,\n    value: string\n  ) => void\n}\n\nconst CitySelect = (props: IComponentProps) => {\n  const {\n    cityOptions,\n    loadingCityOptions,\n    selectedCity,\n    handleDropdownChange,\n    handleInputChange,\n  } = props\n\n  return (\n    <Grid container item>\n      <Grid item xs={12}>\n        <Autocomplete\n          id=\"citySelect\"\n          value={selectedCity}\n          sx={{ width: '100%' }}\n          options={cityOptions}\n          getOptionLabel={(option) =>\n            option.state.length > 0\n              ? `${option.cityName}, ${option.state}, ${option.country}`\n              : `${option.cityName}, ${option.country}`\n          }\n          isOptionEqualToValue={(option, value) => option.id === value.id}\n          loading={loadingCityOptions}\n          onChange={handleDropdownChange}\n          onInputChange={handleInputChange}\n          renderOption={(renderProps, option) => {\n            if (option.state.length > 0) {\n              return (\n                <li {...renderProps} key={option.id}>\n                  {`${option.cityName}, ${option.state}, ${option.country}`}\n                </li>\n              )\n            } else {\n              return (\n                <li {...renderProps} key={option.id}>\n                  {`${option.cityName}, ${option.country}`}\n                </li>\n              )\n            }\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"City\"\n              placeholder=\"Search cities...\"\n              inputProps={{\n                ...params.inputProps,\n              }}\n            />\n          )}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default CitySelect\n","import { Dispatch, SetStateAction, SyntheticEvent } from 'react'\nimport { EDefaultSelectedCity, IDigestedGeocodingOption } from '../../types'\nimport CitySelect from './CitySelect'\n\ninterface IComponentProps {\n  setSearchedCity: Dispatch<SetStateAction<string>>\n  cityOptions: Array<IDigestedGeocodingOption>\n  loadingCityOptions: boolean\n  setSelectedCity: Dispatch<SetStateAction<IDigestedGeocodingOption>>\n  selectedCity: IDigestedGeocodingOption\n}\n\nconst CitySelectContainer = (props: IComponentProps) => {\n  const {\n    setSearchedCity,\n    cityOptions,\n    loadingCityOptions,\n    setSelectedCity,\n    selectedCity,\n  } = props\n\n  /** Fires when the user types in the autocomplete */\n  const handleInputChange = (\n    _event: SyntheticEvent<Element, Event>,\n    value: string\n  ) => {\n    setSearchedCity(value)\n  }\n\n  /** Fires when the user selects an option from the autocomplete */\n  const handleDropdownChange = (\n    _event: SyntheticEvent<Element, Event>,\n    value: IDigestedGeocodingOption | null\n  ) => {\n    if (value) {\n      setSelectedCity(value)\n      window.localStorage.setItem('savedCity', JSON.stringify(value))\n    } else {\n      setSelectedCity(EDefaultSelectedCity)\n    }\n  }\n\n  return (\n    <CitySelect\n      selectedCity={selectedCity}\n      cityOptions={cityOptions}\n      loadingCityOptions={loadingCityOptions}\n      handleDropdownChange={handleDropdownChange}\n      handleInputChange={handleInputChange}\n    />\n  )\n}\n\nexport default CitySelectContainer\n","import { MouseEvent } from 'react'\nimport {\n  Grid,\n  ToggleButton,\n  ToggleButtonGroup,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport { TUnits } from '../../types'\n\ninterface IComponentProps {\n  units: TUnits\n  handleChange: (event: MouseEvent<HTMLElement>, value: TUnits) => void\n}\n\nconst UnitToggle = (props: IComponentProps) => {\n  const { units, handleChange } = props\n\n  const theme = useTheme()\n  const largeScreen = useMediaQuery(theme.breakpoints.up('lg'))\n\n  return (\n    <Grid container item justifyContent={largeScreen ? 'flex-end' : 'center'}>\n      <ToggleButtonGroup\n        value={units}\n        exclusive\n        onChange={handleChange}\n        aria-label=\"units\"\n      >\n        <ToggleButton value=\"metric\" aria-label=\"Celsius\">\n          Celsius\n        </ToggleButton>\n        <ToggleButton value=\"imperial\" aria-label=\"Fahrenheit\">\n          Fahrenheit\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </Grid>\n  )\n}\n\nexport default UnitToggle\n","import { Dispatch, SetStateAction } from 'react'\nimport UnitToggle from './UnitToggle'\nimport { TUnits } from '../../types'\n\ninterface IComponentProps {\n  setUnits: Dispatch<SetStateAction<TUnits>>\n  units: TUnits\n}\n\nconst UnitToggleContainer = (props: IComponentProps) => {\n  const { setUnits, units } = props\n\n  /** Handle switching between Celsius and Fahrenheit */\n  const handleChange = (\n    _event: React.MouseEvent<HTMLElement>,\n    value: TUnits\n  ) => {\n    setUnits(value)\n  }\n\n  return <UnitToggle handleChange={handleChange} units={units} />\n}\n\nexport default UnitToggleContainer\n","import { Dispatch, SetStateAction } from 'react'\nimport { Grid, CssBaseline, useMediaQuery, useTheme } from '@mui/material'\nimport Dashboard from '../Components/Dashboard/Dashboard'\nimport { IDigestedGeocodingOption, TUnits } from '../types'\nimport Footer from '../Components/Footer/Footer'\nimport CitySelectContainer from '../Components/CitySelect/CitySelectContainer'\nimport UnitToggleContainer from '../Components/UnitToggle/UnitToggleContainer'\nimport '../style.css'\n\ninterface IComponentProps {\n  setSearchedCity: Dispatch<SetStateAction<string>>\n  cityOptions: Array<IDigestedGeocodingOption>\n  loadingCityOptions: boolean\n  setSelectedCity: Dispatch<SetStateAction<IDigestedGeocodingOption>>\n  selectedCity: IDigestedGeocodingOption\n  setUnits: Dispatch<SetStateAction<TUnits>>\n  units: TUnits\n}\n\nconst App = (props: IComponentProps) => {\n  const {\n    setSearchedCity,\n    cityOptions,\n    loadingCityOptions,\n    setSelectedCity,\n    selectedCity,\n    units,\n    setUnits,\n  } = props\n\n  const theme = useTheme()\n  const largeScreen = useMediaQuery(theme.breakpoints.up('lg'))\n\n  return (\n    <>\n      <CssBaseline />\n      <Grid\n        container\n        direction=\"column\"\n        sx={{\n          background: '#eef6fb',\n          paddingTop: '2em',\n        }}\n      >\n        <Grid container item justifyContent=\"center\">\n          <Grid container item xl={6} lg={7} md={6} sm={7} xs={11}>\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              direction={largeScreen ? 'row' : 'column'}\n              alignItems=\"center\"\n              spacing={largeScreen ? undefined : 2}\n            >\n              <Grid item container lg={5} md={4} sm={6}>\n                <CitySelectContainer\n                  setSearchedCity={setSearchedCity}\n                  cityOptions={cityOptions}\n                  loadingCityOptions={loadingCityOptions}\n                  setSelectedCity={setSelectedCity}\n                  selectedCity={selectedCity}\n                />\n              </Grid>\n              <Grid item container lg={2}>\n                <UnitToggleContainer units={units} setUnits={setUnits} />\n              </Grid>\n            </Grid>\n            <Dashboard />\n            <Footer />\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n\nexport default App\n","const baseURL = 'https://api.openweathermap.org'\n\n/** A helper method to build a URL with query parameters\n * @param {String} endpoint The endpoint you're trying to reach\n * @param {Object} params the search parameters\n * @returns {String} URL\n */\nexport const buildURLWithQueryParams = (endpoint: string, params: {}) => {\n  const url = new URL([baseURL, endpoint].join(''))\n  const urlSearchParams = new URLSearchParams(params)\n  url.search = String(urlSearchParams)\n  return url.href\n}\n\n/** Gets weather forecast data from the OpenWeatherMap API\n * @param {Object} params the search parameters\n * @returns {Promise<Response>}\n */\nexport const getWeatherData = (params: {}) => {\n  return fetch(buildURLWithQueryParams(`/data/2.5/onecall`, params))\n}\n\n/** Gets geocoding (city) data from the OpenWeatherMap API\n * @param {Object} params the search parameters\n * @returns {Promise<Response>}\n */\nexport const getGeocodingData = (params: {}) => {\n  return fetch(buildURLWithQueryParams(`/geo/1.0/direct`, params))\n}\n","import { useEffect, useState } from 'react'\nimport { digestWeatherData, digestGeocodingData } from '../Logic/LogicHelpers'\nimport {\n  IDigestedGeocodingOption,\n  EDefaultSelectedCity,\n  TUnits,\n} from '../types'\nimport '../style.css'\nimport App from './App'\nimport { useSetRecoilState } from 'recoil'\nimport { atomForecast } from '../atoms'\nimport { getWeatherData, getGeocodingData } from '../Data/DataHelpers'\n\nconst AppContainer = () => {\n  /** State setter to update the five-day weather forecast array */\n  const setForecast = useSetRecoilState(atomForecast)\n  /** City name that the user has typed in the city select */\n  const [searchedCity, setSearchedCity] = useState('')\n  /** Array of options for the city select, based on the user's search */\n  const [cityOptions, setCityOptions] = useState<IDigestedGeocodingOption[]>([])\n  /** Boolean to determine whether options are loading for the city select */\n  const [loadingCityOptions, setLoadingCityOptions] = useState(false)\n  /** Selected city to display weather forecast */\n  const [selectedCity, setSelectedCity] =\n    useState<IDigestedGeocodingOption>(EDefaultSelectedCity)\n  /** Whether temperatures are displayed in metric or imperial units */\n  const [units, setUnits] = useState<TUnits>('metric')\n\n  /** If the user previously used the app to search for a city, display the forecast for that city when they return to the app */\n  useEffect(() => {\n    if (window.localStorage.savedCity) {\n      setSelectedCity(JSON.parse(window.localStorage.savedCity))\n    }\n  }, [])\n\n  /** Fetch options for the city select when the user searches for a city */\n  useEffect(() => {\n    if (searchedCity.length > 3) {\n      setCityOptions([])\n      setLoadingCityOptions(true)\n      setTimeout(() => {\n        getGeocodingData({\n          appid: process.env.REACT_APP_WEATHER_API_KEY,\n          q: searchedCity,\n          limit: 3,\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            setCityOptions(digestGeocodingData(data))\n            setLoadingCityOptions(false)\n          })\n          .catch((err) => {\n            console.error(err)\n          })\n      }, 500)\n    }\n  }, [searchedCity])\n\n  /** Fetch weather forecast data from the weather API when a city is selected */\n  useEffect(() => {\n    setForecast([])\n    setTimeout(() => {\n      getWeatherData({\n        appid: process.env.REACT_APP_WEATHER_API_KEY,\n        lat: selectedCity.latitude,\n        lon: selectedCity.longitude,\n        exclude: 'minutely,hourly,alerts',\n        units: units,\n      })\n        .then((response) => response.json())\n        .then((data) => setForecast(digestWeatherData(data.daily.slice(0, 5))))\n        .catch((err) => {\n          console.error(err)\n        })\n    }, 500)\n  }, [selectedCity, units, setForecast])\n\n  return (\n    <App\n      setSearchedCity={setSearchedCity}\n      cityOptions={cityOptions}\n      loadingCityOptions={loadingCityOptions}\n      setSelectedCity={setSelectedCity}\n      selectedCity={selectedCity}\n      units={units}\n      setUnits={setUnits}\n    />\n  )\n}\n\nexport default AppContainer\n","import { IWeatherDay, IGeocodingOption } from '../types'\nimport { isoCountries } from '../constants'\n\n/** Digests the array of forecast data from the weather API, reducing it down to the essentials.\n * @param {Array} weatherArray - Array of forecast data from the weather API\n * @returns {Array} - Returns the digested array of data, reduced to the essentials.\n */\nexport const digestWeatherData = (weatherArray: Array<IWeatherDay>) => {\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  return weatherArray.map((day, index) => {\n    return {\n      day: weekDays[new Date(day.dt * 1000).getDay()], // returns the day of the week, abbreviated.\n      minTemp: Math.round(day.temp.min), // minimum daily temperature, rounded to the nearest integer.\n      maxTemp: Math.round(day.temp.max), // maximum daily temperature, rounded to the nearest integer.\n      weather: day.weather[0].description, // overall weather forecast for the day.\n      weatherId: day.weather[0].id, // ID of the weather forecast, used to display the appropriate weather icon.\n      dayId: index,\n    }\n  })\n}\n\n/** Digests the array of geocoding data from the weather API, reducing it down to the essentials.\n * @param {Array} geocodingData - Array of geocoding data (cites) from the weather API\n * @returns {Array} - Returns the digested array of geocoding (city) data, reduced to the essentials.\n */\nexport const digestGeocodingData = (geocodingData: Array<IGeocodingOption>) => {\n  return geocodingData.map((option, index) => {\n    return {\n      cityName: option.name,\n      state: option.state ? option.state : '',\n      country: isoCountries[option.country],\n      longitude: option.lon,\n      latitude: option.lat,\n      id: index,\n    }\n  })\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './App/AppContainer'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <AppContainer />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}